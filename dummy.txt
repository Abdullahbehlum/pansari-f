   import { Select } from "antd";
import * as Yup from "yup"
import { useFormik } from "formik";
import { toast } from "react-toastify";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { useState } from "react";
const CheckOutSchema = Yup.object({
  fname: Yup.string().required("Frist Name is Required"),
  lname: Yup.string().required("Last Name is Required"),
  email: Yup.string()
    .email(
      "Please enter a valid email address. An email address should be in the format: example@domain.com. Ensure there are no spaces or special characters that are not part of the standard email format."
    )
    .required(),
  pnumber: Yup.number()
    .typeError("That doesn't look like a phone number")
    .positive("A phone number can't start with a minus")
    .integer("A phone number can't include a decimal point")
    .min(8)
    .required("A phone number is required"),
  address1: Yup.string().required("Address must be required"),
  address2: Yup.string().optional(),
  zipcode: Yup.number().required("Zipcode is required"),
  accountno: Yup.string().when("paymentType", {
    is: (val) => val === "Easypaisa" || val === "jazz",
    then: Yup.string().required("Account Number is Required"),
    otherwise: Yup.string(),
  }),
});


function checkout() {
  const [SelectedPaymethod, SetSelectedPaymethod] = useState("cashondelivery");
  // const [Selectedcities, Setselectedcities] = useState();
  const navigate = useNavigate();
  const SelectCitiesOption = [
    {
      label: (
        <>
          <p>{"Islamabad"}</p>
        </>
      ),
      value: "Islamabad",
    },
    {
      label: "Lohare",
      value: "Lahore",
    },
    {
      label: "Karachi",
      value: "Karachi",
    },
    {
      label: "Hyderabad",
      value: "Hyderabad",
    },
    {
      label: "Multan",
      value: "Multan",
    },
  ];
  const { handleBlur, handleChange, handleSubmit, errors, values, touched } =
    useFormik({
      initialValues: {
        fname: "",
        lname: "",
        email: "",
        pnumber: "",
        address1: "",
        address2: "",
        zipcode: "",
        accountno: "",
      },
      validationSchema: CheckOutSchema,
      onSubmit: async (values) => {
        try {
          const { data: res } = await axios.post(`/api/v1/orders/create-order`, {
            ...values,
            paymentType: SelectedPaymethod,
          }
          );
          if (res.success === true) {
            toast.success(res.message);
          }
        } catch (errors) {
          toast.error(errors.response.data.message);
        }
      }
    })
  return (
    <>
  
    </>
  );
}

export default checkout;
 <section className="xl:my-12 my-6">
        <div className="flex xl:justify-around justify-center  xl:flex-row md:flex-row sm:flex-row flex-col ">
          <div>
            <div className=" overflow-hidden xl:overflow-auto  xl:mx-0 mx-5 xl:mb-0 mb-5">
              <h3 className="font-bold mb-1 xl:mb-5 text-loggray px-2">
                Shipping Details
              </h3>
              <form className="px-3 py-5" >
                <div className="grid xl:grid-cols-2 gap-2 grid-cols-1">
                  <div className="mb-3 ">
                    <p className="font-semibold mb-1 text-loggray">
                      {" "}
                      Frist Name
                    </p>
                    <input
                      type="text"
                      placeholder="Frist Name...."
                      autoComplete="off"
                      className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm hover:border-gray-600 ${errors.fname ? 'border border-red-400' : ''} ${values.fname && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                      name="fname"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.fname}
                    />
                    <br />
                    {errors.fname && (
                      <>
                        <span className="text-red-500">
                          {errors.fname}
                        </span>
                      </>
                    )}
                  </div>
                  <div className="mb-3 ">
                    <p className="font-semibold mb-1 text-loggray">Last Name</p>
                    <input
                      type="text"
                      placeholder="Last Name...."
                      autoComplete="off"
                      className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm hover:border-gray-600 
                        ${errors.lname ? 'border border-red-400' : ''} ${values.lname && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                      name="lname"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.lname}
                    />
                    <br />
                    {errors.lname && (
                      <>
                        <span className="text-red-500">
                          {errors.lname}
                        </span>
                      </>
                    )}
                  </div>
                </div>
                <div className="grid xl:grid-cols-2 gap-2 grid-cols-1">
                  <div className="mb-3 ">
                    <p className="font-semibold mb-1 text-loggray">
                      Email Address
                    </p>
                    <input
                      type="text"
                      placeholder="Email...."
                      autoComplete="off"
                      className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm
                         hover:border-gray-600 ${errors.email ? 'border border-red-400' : ''} ${values.email && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                      name="email"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.email}
                    />
                    <br />
                    {errors.email && (
                      <>
                        <span className="text-red-500">
                          {errors.email}
                        </span>
                      </>
                    )}
                  </div>
                  <div className="mb-3 ">
                    <p className="font-semibold mb-1 text-loggray">
                      Phone Number
                    </p>
                    <input
                      type="text"
                      placeholder="Phone Number...."
                      autoComplete="off"
                      className={`py-[6px] px-[6px]
                         w-full border border-[#ccc] w-[220px] rounded-sm
                          hover:border-gray-600 ${errors.pnumber ? 'border border-red-400' : ''}
               ${values.pnumbername && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                      name="pnumber"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.pnumber}
                    />
                    <br />{" "}
                    {errors.pnumber && (
                      <>
                        <span className="text-red-500">
                          {errors.pnumber}
                        </span>
                      </>
                    )}
                  </div>
                </div>
                <div className="mb-3 ">
                  <p className="font-semibold mb-1 text-loggray">
                    Address Line 1
                  </p>
                  <input
                    type="text"
                    placeholder="Address 1 ...."
                    autoComplete="off"
                    className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm
                       hover:border-gray-600 ${errors.address1 ? 'border border-red-400' : ''} ${values.address1 && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                    name="address1"
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.address1}
                  />
                  <br />
                  {errors.address1 && (
                    <>
                      <span className="text-red-500">
                        {errors.address1}
                      </span>
                    </>
                  )}
                </div>
                <div className="mb-3 ">
                  <p className="font-semibold mb-1 text-loggray">
                    Address Line 2 (Optional)
                  </p>
                  <input
                    type="text"
                    placeholder="Address 2 ...."
                    autoComplete="off"
                    className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm hover:border-gray-600  focus:border-gray-600 outline-none mb-2`}
                    name="address2"
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.address2}
                  />
                </div>
                {/* <div className="mb-3 ">
                  <p className="font-semibold mb-1 text-loggray">Country</p>
                  <Select
                    name="cities"
                    onChange={(value) => Setselectedcities(value)}
                    placeholder="Choose Your City"
                    className="w-full"
                    options={SelectCitiesOption}
                  />

                </div> */}
                <div className="mb-3 ">
                  <p className="font-semibold mb-1 text-loggray">Zip Code</p>
                  <input
                    type="text"
                    placeholder="Zip Code...."
                    autoComplete="off"
                    className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm hover:border-gray-600 ${errors.zipcode ? 'border border-red-400' : ''} ${values.zipcode && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                    name="zipcode"
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.zipcode}
                  />
                  <br />
                  {errors.zipcode && (
                    <span className="text-red-500">
                      {errors.zipcode}
                    </span>
                  )}
                </div>
                {SelectedPaymethod == "cashondelivery" ? (
                  <>

                  </>
                ) : (<>
                  <div className="mb-3 ">
                    <p className="font-semibold mb-1 text-loggray">
                      Account No
                    </p>
                    <input
                      type="text"
                      placeholder="Name...."
                      autoComplete="off"
                      className={`py-[6px] px-[6px] w-full border border-[#ccc] w-[220px] rounded-sm hover:border-gray-600 ${errors.accountno ? 'border border-red-400' : ''} ${values.accountno && 'border border-lgreen'} focus:border-gray-600 outline-none mb-2`}
                      name="accountno"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.accountno}
                    />
                    <br />
                    {errors.accountno && (
                      <span className="text-red-500">
                        {errors.accountno}
                      </span>
                    )}

                    <button
                      type="button"
                      className="btn bg-lgreen xl:mb-4 mb-3  hover:bg-orange-500 rounded-md xl:w-[390px]
             w-[310px] text-white"
                    >
                      {SelectedPaymethod == "cashondelivery"
                        ? "Place an Order"
                        : "Pay Now"}
                    </button>

                  </div>  </>)}
              </form>
            </div>
          </div>
          <div
            className=" flex flex-col  bg-progray
            justify-center items-center xl:justify-normal xl:items-start
  xl:w-[460px]  xl:py-9 py-7   px-4 xl:px-[25px] w-auto mx-5 rounded-lg  "
          >
            <p className="text-gray-600 border-b xl:mb-6 mb-3 border-slate-500 pb-6 xl:px-4 text-xs xl:text-sm text-left">
              By placing your order, you agree to our company{" "}
              <span className="text-black font-semibold">Privacy policy</span>{" "}
              and{" "}
              <span className="text-black font-semibold">
                Conditions of use.{" "}
              </span>
            </p>
            <h3 className="text-sm xl:mb-6 mb-3">Order Summary</h3>
            <div className="flex justify-between w-auto xl:mb-6 xl:w-[400px] w-auto mb-4  border-b border-slate-500 pb-4">
              <div>
                <h4 className="font-semibold">Items (3)</h4>
              </div>
              <div>
                <h6>900</h6>
              </div>
            </div>
            <div className="flex justify-between  xl:mb-7 xl:w-[400px] w-auto mb-4  border-b border-slate-500 pb-4">
              <div>
                <h4 className="font-semibold">Shipping</h4>
              </div>
              <div>
                <h6>300</h6>
              </div>
            </div>
            <div className="flex justify-between xl:mb-4 border-b border-slate-500 pb-4  xl:w-[400px] w-auto ">
              <div>
                <h4 className="font-semibold">Total Price</h4>
              </div>
              <div>
                <h6>1200</h6>
              </div>
            </div>
            <ul className="nav-item">
              <li>
                <input
                  type="radio"
                  onChange={(e) => SetSelectedPaymethod(e.target.value)}
                  value={"cashondelivery"}
                  checked={SelectedPaymethod === "cashondelivery"}
                />
              </li>
              <li>
                <label htmlFor="Cash on Delivery">Cash on Delivery</label>
              </li>
            </ul>
            <ul className="nav-item">
              <li>
                <input
                  type="radio"
                  onChange={(e) => SetSelectedPaymethod(e.target.value)}
                  value={"Easypaisa"}
                  checked={SelectedPaymethod === "Easypaisa"}
                />
              </li>
              <li>
                <label htmlFor="Easypaisa">Easy Paisa </label>
              </li>
            </ul>
            <ul className="nav-item">
              <li>
                <input
                  type="radio"
                  onChange={(e) => SetSelectedPaymethod(e.target.value)}
                  value={"jazz"}
                  checked={SelectedPaymethod === "jazz"}
                />
              </li>
              <li>
                <label htmlFor="JazzCash">Jazz Cash </label>
              </li>
            </ul>
          </div>
        </div>

      </section>